<!-- views/gym.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>
    <%= gym.name %>
  </title>
  <link
    href="https://fonts.googleapis.com/css2?family=Inter:ital,wght@0,100..900;1,100..900&family=Nunito+Sans:ital,wght@0,200..1000;1,200..1000&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Header Styling */
    .page-header {
      background: linear-gradient(135deg, #0e1428 0%, #1a2332 100%);
      color: #fefdf8;
      border-radius: 16px;
      padding: 2rem;
      margin: 0 0 2rem 0;
      box-shadow: 0 8px 32px rgba(14, 20, 40, 0.15);
      border: 1px solid rgba(232, 93, 4, 0.1);
    }

    .header-content {
      display: flex;
      align-items: center;
      gap: 1.5rem;
    }

    .header-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background: rgba(232, 93, 4, 0.2);
      border-radius: 50%;
      border: 2px solid #e85d04;
    }

    .header-icon i {
      color: #e85d04;
      font-size: 1.5rem;
    }

    .page-title {
      font-family: "Poppins", sans-serif;
      font-size: 2.5rem;
      font-weight: 700;
      margin: 0;
      line-height: 1.2;
    }

    .page-subtitle {
      margin: 0.5rem 0 0 0;
      font-size: 1rem;
      opacity: 0.8;
      font-weight: 400;
    }

    /* Main Content Styling */
    .content {
      padding: 0;
    }

    .gym-details-container {
      background: white;
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(14, 20, 40, 0.08);
      border: 1px solid rgba(14, 20, 40, 0.05);
      margin-bottom: 2rem;
    }

    .details-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .detail-card {
      background: linear-gradient(135deg, #fefdf8 0%, #f8f9fa 100%);
      border-radius: 16px;
      padding: 1.5rem;
      border: 1px solid rgba(14, 20, 40, 0.08);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }

    .detail-card.editable {
      cursor: pointer;
    }

    .edit-button {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(232, 93, 4, 0.1);
      border: none;
      border-radius: 8px;
      padding: 0.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      opacity: 0;
    }

    .detail-card:hover .edit-button {
      opacity: 1;
    }

    .edit-button:hover {
      background: rgba(232, 93, 4, 0.2);
    }

    .edit-button i {
      color: #e85d04;
      font-size: 0.875rem;
    }

    .detail-card::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(135deg, #e85d04 0%, #ff7f50 100%);
    }

    .detail-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 40px rgba(14, 20, 40, 0.12);
      border-color: rgba(232, 93, 4, 0.2);
    }

    .detail-card .card-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 48px;
      height: 48px;
      background: rgba(232, 93, 4, 0.1);
      border-radius: 12px;
      margin-bottom: 1rem;
    }

    .detail-card .card-icon i {
      color: #e85d04;
      font-size: 1.25rem;
    }

    .card-title {
      font-family: "Poppins", sans-serif;
      font-size: 0.875rem;
      font-weight: 600;
      color: #6c757d;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin: 0 0 0.5rem 0;
    }

    .card-value {
      font-family: "Poppins", sans-serif;
      font-size: 1.25rem;
      font-weight: 600;
      color: #0e1428;
      margin: 0;
      line-height: 1.3;
      word-break: break-word;
    }

    /* Rating Section Styling */
    .rating-section {
      margin-top: 2rem;
    }

    .rating-card {
      background: linear-gradient(135deg, #fefdf8 0%, #f8f9fa 100%);
      border-radius: 16px;
      padding: 2rem;
      border: 1px solid rgba(14, 20, 40, 0.08);
      position: relative;
      overflow: hidden;
    }

    .rating-card::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(135deg, #e85d04 0%, #ff7f50 100%);
    }

    .rating-header {
      display: flex;
      align-items: center;
      gap: 1.5rem;
    }

    .rating-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 56px;
      height: 56px;
      background: rgba(232, 93, 4, 0.1);
      border-radius: 14px;
    }

    .rating-icon i {
      color: #e85d04;
      font-size: 1.5rem;
    }

    .rating-title {
      font-family: "Poppins", sans-serif;
      font-size: 1.25rem;
      font-weight: 600;
      color: #0e1428;
      margin: 0 0 0.5rem 0;
    }

    .rating-display {
      display: flex;
      align-items: baseline;
      gap: 1rem;
    }

    .rating-number {
      font-family: "Poppins", sans-serif;
      font-size: 2.5rem;
      font-weight: 700;
      color: #e85d04;
      line-height: 1;
    }

    .rating-details {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .stars {
      display: flex;
      gap: 0.25rem;
    }

    .stars i {
      font-size: 1.125rem;
    }

    .stars .filled {
      color: #ffd700;
    }

    .stars .empty {
      color: #e9ecef;
    }

    .review-count {
      font-size: 0.875rem;
      color: #6c757d;
      font-weight: 500;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .page-header {
        padding: 1.5rem;
        margin: 0 0 1rem 0;
      }

      .header-content {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
      }

      .page-title {
        font-size: 2rem;
      }

      .gym-details-container {
        padding: 1.5rem;
      }

      .details-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .detail-card {
        padding: 1.25rem;
      }

      .rating-card {
        padding: 1.5rem;
      }

      .rating-header {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
      }

      .rating-display {
        justify-content: center;
      }
    }

    @media (max-width: 480px) {
      .page-title {
        font-size: 1.75rem;
      }

      .rating-number {
        font-size: 2rem;
      }

      .card-value {
        font-size: 1.125rem;
      }
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
    }

    .modal-content {
      background: white;
      margin: 10% auto;
      padding: 2rem;
      border-radius: 16px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
      position: relative;
      animation: modalSlideIn 0.3s ease-out;
    }

    @keyframes modalSlideIn {
      from {
        opacity: 0;
        transform: translateY(-50px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e9ecef;
    }

    .modal-title {
      font-family: "Poppins", sans-serif;
      font-size: 1.25rem;
      font-weight: 600;
      color: #0e1428;
      margin: 0;
    }

    .close-button {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6c757d;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    .close-button:hover {
      background: #f8f9fa;
      color: #0e1428;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      font-family: "Poppins", sans-serif;
      font-size: 0.875rem;
      font-weight: 600;
      color: #0e1428;
      margin-bottom: 0.5rem;
    }

    .form-input {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 1px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      font-family: "Poppins", sans-serif;
      transition: all 0.3s ease;
      box-sizing: border-box;
    }

    .form-input:focus {
      outline: none;
      border-color: #e85d04;
      box-shadow: 0 0 0 3px rgba(232, 93, 4, 0.1);
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
      margin-top: 2rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      font-family: "Poppins", sans-serif;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-cancel {
      background: #f8f9fa;
      color: #6c757d;
    }

    .btn-cancel:hover {
      background: #e9ecef;
      color: #495057;
    }

    .btn-save {
      background: #e85d04;
      color: white;
    }

    .btn-save:hover {
      background: #d64b04;
    }

    .btn-save:disabled {
      background: #6c757d;
      cursor: not-allowed;
    }
  </style>
</head>

<body> <app-layout role="<%= role %>" username="<%= username %>" announcements='<%- JSON.stringify(LA) %>'></app-layout>
  <main id="mainContent">
    <div class="page-header">
      <div class="header-content">
        <div class="header-icon">
          <i class="fas fa-dumbbell"></i>
        </div>
        <div class="header-text">
          <h1 class="page-title">
            <%= gym.name %>
              <button class="edit-button" onclick="openEditModal('name')"
                style="position: relative; opacity: 1; margin-left: 1rem;">
                <i class="fas fa-edit"></i>
              </button>
          </h1>
          <p class="page-subtitle">Complete gym information and details</p>
        </div>
      </div>
    </div>
    <div class="content">
      <div class="gym-details-container">
        <div class="details-grid">
          <div class="detail-card location-card">
            <div class="card-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="card-content">
              <h3 class="card-title">Location</h3>
              <p class="card-value">
                <%= gym.town %>
              </p>
            </div>
          </div>
          <div class="detail-card price-card editable" onclick="openEditModal('price')">
            <button class="edit-button" onclick="event.stopPropagation(); openEditModal('price')">
              <i class="fas fa-edit"></i>
            </button>
            <div class="card-icon">
              <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="card-content">
              <h3 class="card-title">Monthly Price</h3>
              <p class="card-value">$<%= gym.pricePerMonth %>
              </p>
            </div>
          </div>
          <div class="detail-card contact-card editable" onclick="openEditModal('phone')">
            <button class="edit-button" onclick="event.stopPropagation(); openEditModal('phone')">
              <i class="fas fa-edit"></i>
            </button>
            <div class="card-icon">
              <i class="fas fa-phone"></i>
            </div>
            <div class="card-content">
              <h3 class="card-title">Phone</h3>
              <p class="card-value">
                <%= gym.contact.phonenumber %>
              </p>
            </div>
          </div>
          <div class="detail-card email-card editable" onclick="openEditModal('email')">
            <button class="edit-button" onclick="event.stopPropagation(); openEditModal('email')">
              <i class="fas fa-edit"></i>
            </button>
            <div class="card-icon">
              <i class="fas fa-envelope"></i>
            </div>
            <div class="card-content">
              <h3 class="card-title">Email</h3>
              <p class="card-value">
                <%= gym.contact.email %>
              </p>
            </div>
          </div>
          <div class="detail-card password-card editable" onclick="openEditModal('password')">
            <button class="edit-button" onclick="event.stopPropagation(); openEditModal('password')">
              <i class="fas fa-edit"></i>
            </button>
            <div class="card-icon">
              <i class="fas fa-key"></i>
            </div>
            <div class="card-content">
              <h3 class="card-title">Password</h3>
              <p class="card-value">
                <%= gym.Secretpass %>
              </p>
            </div>
          </div>
        </div>

        <div class="rating-section">
          <div class="rating-card">
            <div class="rating-header">
              <div class="rating-icon">
                <i class="fas fa-star"></i>
              </div>
              <div class="rating-content">
                <h3 class="rating-title">Member Rating</h3>
                <div class="rating-display">
                  <span class="rating-number">
                    <%= gym.reviews.totalreviews> 0
                      ? (gym.reviews.totalstars / gym.reviews.totalreviews).toFixed(1)
                      : 0 %>
                  </span>
                  <div class="rating-details">
                    <div class="stars">
                      <% const rating=gym.reviews.totalreviews> 0 ? (gym.reviews.totalstars / gym.reviews.totalreviews)
                        : 0;
                        const fullStars = Math.floor(rating);
                        const hasHalfStar = rating % 1 >= 0.5;
                        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0); %>
                        <% for(let i=0; i < fullStars; i++) { %>
                          <i class="fas fa-star filled"></i>
                          <% } %>
                            <% if(hasHalfStar) { %>
                              <i class="fas fa-star-half-alt filled"></i>
                              <% } %>
                                <% for(let i=0; i < emptyStars; i++) { %>
                                  <i class="far fa-star empty"></i>
                                  <% } %>
                    </div>
                    <span class="review-count">(<%= gym.reviews.totalreviews %> reviews)</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Edit Modals -->
  <!-- Name Modal -->
  <div id="nameModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Edit Gym Name</h3>
        <button class="close-button" onclick="closeModal('nameModal')">&times;</button>
      </div>
      <form id="nameForm">
        <div class="form-group">
          <label class="form-label" for="gymName">Gym Name</label>
          <input type="text" id="gymName" class="form-input" value="<%= gym.name %>" required>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-cancel" onclick="closeModal('nameModal')">Cancel</button>
          <button type="submit" class="btn btn-save">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Price Modal -->
  <div id="priceModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Edit Monthly Price</h3>
        <button class="close-button" onclick="closeModal('priceModal')">&times;</button>
      </div>
      <form id="priceForm">
        <div class="form-group">
          <label class="form-label" for="gymPrice">Monthly Price ($)</label>
          <input type="number" id="gymPrice" class="form-input" value="<%= gym.pricePerMonth %>" min="0" step="0.01"
            required>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-cancel" onclick="closeModal('priceModal')">Cancel</button>
          <button type="submit" class="btn btn-save">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Phone Modal -->
  <div id="phoneModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Edit Phone Number</h3>
        <button class="close-button" onclick="closeModal('phoneModal')">&times;</button>
      </div>
      <form id="phoneForm">
        <div class="form-group">
          <label class="form-label" for="gymPhone">Phone Number</label>
          <input type="tel" id="gymPhone" class="form-input" value="<%= gym.contact.phonenumber %>" required>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-cancel" onclick="closeModal('phoneModal')">Cancel</button>
          <button type="submit" class="btn btn-save">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Email Modal -->
  <div id="emailModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Edit Email Address</h3>
        <button class="close-button" onclick="closeModal('emailModal')">&times;</button>
      </div>
      <form id="emailForm">
        <div class="form-group">
          <label class="form-label" for="gymEmail">Email Address</label>
          <input type="email" id="gymEmail" class="form-input" value="<%= gym.contact.email %>" required>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-cancel" onclick="closeModal('emailModal')">Cancel</button>
          <button type="submit" class="btn btn-save">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Password Modal -->
  <div id="passwordModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Generate New Password</h3>
        <button class="close-button" onclick="closeModal('passwordModal')">&times;</button>
      </div>
      <div class="form-group">
        <p>This will generate a new random password for your gym. Are you sure you want to continue?</p>
      </div>
      <div class="modal-actions">
        <button type="button" class="btn btn-cancel" onclick="closeModal('passwordModal')">Cancel</button>
        <button type="button" class="btn btn-save" onclick="generateNewPassword()">Generate New Password</button>
      </div>
    </div>
  </div>
</body>
<script src="../../scripts/components/app-layout.js"></script>
<script src="../../scripts/components/map.js"></script>

<script>
  // Global variable to store gym ID
  let gymId = '<%= gym._id %>';

  // Modal functions
  function openEditModal(type) {
    const modal = document.getElementById(type + 'Modal');
    if (modal) {
      modal.style.display = 'block';
    }
  }

  function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
  }

  // Close modal when clicking outside
  window.onclick = function (event) {
    if (event.target.classList.contains('modal')) {
      event.target.style.display = 'none';
    }
  }

  // Form submission handlers
  document.getElementById('nameForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const newName = document.getElementById('gymName').value.trim();

    if (!newName) {
      alert('Please enter a valid gym name');
      return;
    }

    try {
      const response = await fetch(`/gym/${gymId}/name`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newname: newName })
      });

      const data = await response.json();

      if (response.ok) {
        // Update the page title
        document.querySelector('.page-title').firstChild.textContent = newName;
        closeModal('nameModal');
        showSuccessMessage('Gym name updated successfully!');
      } else {
        alert(data.message || 'Failed to update gym name');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while updating the gym name');
    }
  });

  document.getElementById('priceForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const newPrice = document.getElementById('gymPrice').value;

    if (!newPrice || newPrice < 0) {
      alert('Please enter a valid price');
      return;
    }

    try {
      const response = await fetch(`/gym/${gymId}/price`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newprice: parseFloat(newPrice) })
      });

      const data = await response.json();

      if (response.ok) {
        // Update the price display
        document.querySelector('.price-card .card-value').textContent = `$${newPrice}`;
        closeModal('priceModal');
        showSuccessMessage('Price updated successfully!');
      } else {
        alert(data.message || 'Failed to update price');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while updating the price');
    }
  });

  document.getElementById('phoneForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const newPhone = document.getElementById('gymPhone').value.trim();

    if (!newPhone) {
      alert('Please enter a valid phone number');
      return;
    }

    try {
      const response = await fetch(`/gym/${gymId}/phone`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newphone: newPhone })
      });

      const data = await response.json();

      if (response.ok) {
        // Update the phone display
        document.querySelector('.contact-card .card-value').textContent = newPhone;
        closeModal('phoneModal');
        showSuccessMessage('Phone number updated successfully!');
      } else {
        alert(data.message || 'Failed to update phone number');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while updating the phone number');
    }
  });

  document.getElementById('emailForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const newEmail = document.getElementById('gymEmail').value.trim();

    if (!newEmail || !newEmail.includes('@')) {
      alert('Please enter a valid email address');
      return;
    }

    try {
      const response = await fetch(`/gym/${gymId}/email`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newemail: newEmail })
      });

      const data = await response.json();

      if (response.ok) {
        // Update the email display
        document.querySelector('.email-card .card-value').textContent = newEmail;
        closeModal('emailModal');
        showSuccessMessage('Email updated successfully!');
      } else {
        alert(data.message || 'Failed to update email');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while updating the email');
    }
  });

  async function generateNewPassword() {
    try {
      const response = await fetch(`/gym/${gymId}/password`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const data = await response.json();

      if (response.ok) {
        // Refresh the page to show the new password
        location.reload();
      } else {
        alert(data.message || 'Failed to generate new password');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while generating new password');
    }
  }

  function showSuccessMessage(message) {
    // Create a simple success notification
    const notification = document.createElement('div');
    notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #28a745;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    z-index: 1001;
    font-family: "Poppins", sans-serif;
    font-weight: 500;
  `;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>

</html>